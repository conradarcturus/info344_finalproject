from django.shortcuts import render
from django.shortcuts import redirect
from django.shortcuts import render, get_object_or_404
from rest_framework import status 
from rest_framework.decorators import api_view 
from rest_framework.response import Response 
from shine.models import * 
from shine.serializers import *
from shine.forms import *
from shine.process_tweets import *
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse
from django.views.generic import CreateView, UpdateView, DeleteView, ListView, DetailView
#from myproject.core.views import MessageMixin
from django.core.urlresolvers import reverse_lazy
import string, re
from shine.external_api import *


@login_required(login_url='/accounts/login/')
def external_api(request):

	try:
		inputFile = InputFile.objects.get(pk="2015-08-23 20:41:08+00:00")
	except InputFile.DoesNotExist:
		return Response(status=status.HTTP_404_NOT_FOUND)

	#for inputFile in inputFiles:
	tweets = readTweets(inputFile.data_csv.url)
	#	break
	result = verify_tweets(tweets)

	return HttpResponse(result)

@login_required(login_url='/accounts/login/')
def generate_features(request):

	try:
		inputFile = InputFile.objects.get(pk="2015-08-23 20:41:08+00:00")
		featureScript = FeatureScript.objects.get(pk="TweetLengthExtractor")
	except InputFile.DoesNotExist:
		return Response(status=status.HTTP_404_NOT_FOUND)

	features = executeFeatureScript(inputFile, featureScript)

	return HttpResponse(features)
	# return render(request, 'shine/edit_form.html', {'title': "Input File", 'form': form})

@login_required(login_url='/accounts/login/')
def new_input_file(request):
	if request.method == 'POST':
		form = UploadInputFileForm(request.POST, request.FILES)
		if form.is_valid():
			# file is saved
			form.save()
			return HttpResponseRedirect('/')
	else:
		form = UploadInputFileForm()
	return render(request, 'forms/edit.html', {'title': "Tweet Dataset", 'form': form})

@login_required(login_url='/accounts/login/')
def edit_input_file(request, pk):
	inputFile = get_object_or_404(InputFile, pk=pk)
	if request.method == 'POST':
		form = UploadInputFileForm(request.POST, request.FILES, instance=inputFile)
		if form.is_valid():
			# file is saved
			form.save()
			return HttpResponseRedirect('/')
	else:
		form = UploadInputFileForm(instance=inputFile)
	return render(request, 'forms/edit.html', {'title': "Tweet Dataset", 'form': form})

@login_required(login_url='accounts/login/')
def remove_input_file(request, pk):
	inputFile = get_object_or_404(InputFile, pk=pk)
	inputFile.delete()
	return HttpResponseRedirect('/')

class FeatureScriptCreate(CreateView):
    model = FeatureScript
    fields = ['name', 'script']
    template_name = 'forms/edit.html'
    success_url = '/'

class FeatureScriptUpdate(UpdateView):
    model = FeatureScript
    fields = ['name', 'script']
    template_name = 'forms/edit.html'
    success_url = '/'

class FeatureScriptDelete(DeleteView):
    model = FeatureScript
    success_url = '/'
    template_name = 'forms/delete.html'

    def post(self, request, *args, **kwargs):
        if "cancel" in request.POST:
            return HttpResponseRedirect('/')
        else:
            return super(FeatureScriptDelete, self).post(request, *args, **kwargs)

class ClassifierCreate(CreateView):
    model = Analysis
    fields = ['name', 'script']
    template_name = 'forms/edit.html'
    success_url = '/'

class ClassifierUpdate(UpdateView):
    model = Analysis
    fields = ['name', 'script']
    template_name = 'forms/edit.html'
    success_url = '/'

class ClassifierDelete(DeleteView):
    model = Analysis
    success_url = '/'
    template_name = 'forms/delete.html'

    def post(self, request, *args, **kwargs):
        if "cancel" in request.POST:
            return HttpResponseRedirect('/')
        else:
            return super(ClassifierDelete, self).post(request, *args, **kwargs)

@login_required(login_url='/accounts/login/')
def edit_classifier(request):
	if request.method == 'POST':
		form = AnalysisForm(request.POST, request.FILES)
		if form.is_valid():
			# file is saved
			form.save()
			return HttpResponseRedirect('/')
	else:
		form = FeatureScriptForm()
	return render(request, 'shine/edit_form.html', {'title': "Classifier Script", 'form': form})

@login_required(login_url='/accounts/login/')
def input_list(request):
	events = Event.objects.all()
	rumors = Rumor.objects.all()
	inputs = Input.objects.all()
	return render(request, 'shine/input_list.html', {'events': events, 'rumors': rumors, 'inputs': inputs})

@login_required(login_url='/accounts/login/')
def master_list(request):
	inputFiles = InputFile.objects.all()
	datasets = []
	for inputFile in inputFiles:
		tweets = readTweets(inputFile.data_csv.url)
		tweets = verify_tweets(tweets)
		datasets.append({'tweets': tweets, 'event': inputFile.event, 'description': inputFile.description, 'rumor': inputFile.rumor, 'example': tweets[0]['text'], 'key': inputFile.data_csv.url[5:-4], 'pk': inputFile.pk})

	feature_scripts = FeatureScript.objects.all()
	feature_scripts2 = []
	for feature_script in feature_scripts:
		excerpt = feature_script.script[:50]
		key = "fs" + removeNonAlphaNum(str(feature_script.created))
		feature_scripts2.append({'name': feature_script.name, 'script': feature_script.script, 'excerpt': excerpt, 'key': key, 'pk': feature_script.pk})

	analysis_scripts = Analysis.objects.all()
	classifiers = []
	for analysis_script in analysis_scripts:
		excerpt = analysis_script.script[:50]
		key = "cs" + removeNonAlphaNum(str(analysis_script.created))
		classifiers.append({'name': analysis_script.name, 'script': analysis_script.script, 'excerpt': excerpt, 'key': key, 'pk': analysis_script.pk})

	return render(request, 'shine/shine.html', {'datasets': datasets, 'feature_scripts': feature_scripts2, 'classifiers': classifiers})

@login_required(login_url='/accounts/login/')
@api_view(['GET', 'POST'])
def input_rest_api(request, format=None):
	"""     List all users, or create a new user.     """
	if request.method == 'GET':
		inputFile = InputFile.objects.all()
		serializer = InputFileSerializer(inputFile, many=True)
		return Response(serializer.data)
	elif request.method == 'POST':
		serializer = InputFileSerializer(data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response(serializer.data, status=status.HTTP_201_CREATED)
		return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@login_required(login_url='/accounts/login/')
@api_view(['GET', 'PUT', 'DELETE'])
def input_file_detail(request, pk, format=None):
	"""
	Retrieve, update or delete a input file instance.
	"""
	try:
		inputFile = InputFile.objects.get(pk=pk)
	except InputFile.DoesNotExist:
		return Response(status=status.HTTP_404_NOT_FOUND)


	if request.method == 'GET':
		serializer = InputFileSerializer(inputFile)
		return Response(serializer.data)

	elif request.method == 'PUT':
		serializer = InputFileSerializer(inputFile, data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response(serializer.data)
		return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

	elif request.method == 'DELETE':
		inputFile.delete()
		return Response(status=status.HTTP_204_NO_CONTENT)



# @api_view(['GET', 'POST']) def rumor_list(request, format=None):
# """     List all rumors, or create a new rumors.     """     
# if request.method == 'GET':
# 	rumors = Rumor.objects.all()
# 	serializer = RumorSerializer(rumors, many=True)
# 	return Response(serializer.data)
# elif request.method == 'POST':
# 	serializer = RumorSerializer(data=request.data)
# 	if serializer.is_valid():
# 		serializer.save()
# 		return Response(serializer.data, status=status.HTTP_201_CREATED)
# 	return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# # Create your views here.
# @api_view(['GET', 'POST']) def rumor_list(request, format=None):
# """     List all rumors, or create a new rumors.     """     
# if request.method == 'GET':
# 	rumors = Rumor.objects.all()
# 	serializer = RumorSerializer(rumors, many=True)
# 	return Response(serializer.data)
# elif request.method == 'POST':
# 	serializer = RumorSerializer(data=request.data)
# 	if serializer.is_valid():
# 		serializer.save()
# 		return Response(serializer.data, status=status.HTTP_201_CREATED)
# 	return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
